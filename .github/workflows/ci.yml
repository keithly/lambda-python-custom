name: Deploy to ECR and Lambda

on:
  push:
    branches: [ "main" ]
  pull_request:

permissions:
  contents: read

env:
  ECR_REPOSITORY: lambda-python-custom

jobs:
  build-push-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - uses: docker/setup-buildx-action@v2

      - name: Docker Build
        uses: docker/build-push-action@v3
        with:
          context: .
          load: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker Image
        run: |
          docker run --rm --init ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}

      - name: Docker Build and Push
        uses: docker/build-push-action@v3
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        with:
          context: .
          push: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.6

      - name: Check Terraform Format
        id: fmt
        run: terraform -chdir='infra/tf' fmt -check

      - name: Terraform Init
        id: init
        run: terraform -chdir='infra/tf' init

      - name: Terraform Validate
        id: validate
        run: terraform -chdir='infra/tf' validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform -chdir='infra/tf' plan -var 'image_tag=${{ github.sha }}' -no-color -out=tfplan
        continue-on-error: true

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        id: apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform -chdir='infra/tf' apply -auto-approve tfplan
        continue-on-error: true
